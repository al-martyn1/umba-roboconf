Основные моменты, которые хорошо влияют на производительность
(Готовим C++ вместе)

1) Всегда старайтесь оценить количество объектов, которые будут хранится в контейнере.
2) Само собой, не стоит передавать жирные объекты по значению. Это дорого.
3) map/set vs unordered - вносят небольшой процент, но на небольших размерах словарей дают единицы процентов прироста производительности.
4) Большая проблема - вектора
     Резервировать место сразу при создании вектора - большие тормоза, как оказалось. Вектора часто бывают пустыми.
     Резервировать место надо при добавлении элемента в вектор. Не надо делать проверок, есть ли в векторе ещё место - 
       унутре у вектора есть те же самые проверки, не надо делать двойную работу.
       при каждом добавлении элемента делаем reserve(16), как минимум. Ну, если конечно, пустой обхект весит немного.
       Если пустой объект сам по себе очень жирный, тут думайте сами.
     Если вам дорога память, как память, можно регулярно делать shrink_to_fit(). Это не дорого.
     emplace_back сам по себе не спасает отца русской демократии. Отец русской демократии должен сам оценить,
       что нужно делать. Если у вас заканчивается скоуп времени жизни объекта, и вы хотите его emplace_back в вектор,
       и вы знаете, что после помещения в вектор объект уже не нужен - хорошим решением будет сделать
       emplace_back(std::move(myObj)) - это обеспечит буст на десятки процентов в данном месте (зависит от жирноты объектов).