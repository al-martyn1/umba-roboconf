readListByTemplate

L - список
T - token
V - value
S - something
A - value or list

Tsi! s - case sensitive
     i - case insensitive
     ! - stop but no error if token unknown

L - пропускает список, в выходной вектор помещает <list>

V0   0 - допускает пустое значение (может возникнуть после раскавычивания)

S'   список или значение
     ' - не раскавычивать
     извлекает значение или первый элемент списка

A0'* значение или список, вычитываем в линейный вектор
     * - любое количество - допустимо только в конце списка


---
Новое

+ - 1 или более, one_more_item,
      если ничего не прочиталось, то ошибка
    L+, A+

? - 0 или 1, optional_item - если текст, то извлекаем,
             если нашли дочерний список или конец текущего,
             то ничего не делаем, возвращаем пустое значение
    V?

_ - допускает пустое значение (может возникнуть после раскавычивания)
    вместо старого 0

* - любое количество - допустимо только в конце списка (A)

V - value
    ? - может отсутствовать (обнаружен конец списка или дочерний список)
    _ - допустимо пустое значение (после раскавычивания)
    в любом случае помещаем пустой элемент в результат.

Mxx - делаем map<string, vector<string> > из дочерних подсписков
Exx - делаем vector< vector<string> > из дочерних подсписков
      xx - число элементов, если не задано, то автоматически.
      Останавливаемся, встретив текстовый элемент или конец текущего списка
      Для map первый элемент становится ключем.
      Если задан флаг +, то xx - минимальное количество, но можно больше,
      иначе - фиксированное количество.
      Если число не задано, то + говорит, что должно быть не пустое количество
      элементов.
      map от вектора отличается тем, что первый элемент ключ, должен быть всегда
      и не учитывается при подсчете элементов.
      _ - допустимо пустое значение (после раскавычивания) (ключи пустыми не бывают)

      (someTag (item1 val1) (item2 val2) ... )

L   - Список, текстовые элементы вычитываем в вектор (не дочерный подсписок).
      Останов по концу текущего списка или если встречается дочерний список.

      (someTag (item1 item2 item3 item4) )

I   - Список, текстовые элементы вычитываем в вектор (чтение дочернего подсписка).

A   - одно значение или подсписок, вычитываем в линейный вектор
      A_+
      Без + - допустим пустой список
